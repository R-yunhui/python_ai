Python 编程基础知识

Python 是一种高级编程语言，由 Guido van Rossum 于 1991 年首次发布。Python 以其简洁、易读的语法而闻名，是初学者学习编程的理想选择。

数据类型
Python 有多种内置数据类型：
- 整数（int）：如 1, 2, 3, -10
- 浮点数（float）：如 3.14, 2.5, -0.5
- 字符串（str）：如 "hello", 'world'
- 布尔值（bool）：True 或 False
- 列表（list）：如 [1, 2, 3], ['a', 'b', 'c']
- 元组（tuple）：如 (1, 2, 3), ('x', 'y')
- 字典（dict）：如 {'name': 'Alice', 'age': 25}
- 集合（set）：如 {1, 2, 3}

变量和赋值
在 Python 中，变量不需要显式声明类型。你可以直接给变量赋值：
name = "Alice"
age = 25
height = 1.65
is_student = True

Python 会自动推断变量的类型。你可以使用 type() 函数查看变量的类型。

条件语句
Python 使用 if、elif 和 else 来实现条件判断：
if age < 18:
    print("未成年")
elif age < 60:
    print("成年人")
else:
    print("老年人")

注意 Python 使用缩进来表示代码块，而不是花括号。

循环语句
Python 有两种主要的循环：for 循环和 while 循环。

for 循环通常用于遍历序列：
for i in range(5):
    print(i)

for name in ['Alice', 'Bob', 'Charlie']:
    print(name)

while 循环在条件为真时重复执行：
count = 0
while count < 5:
    print(count)
    count += 1

函数
函数是组织代码的重要方式。使用 def 关键字定义函数：
def greet(name):
    return f"Hello, {name}!"

result = greet("Alice")
print(result)

函数可以有默认参数：
def power(base, exponent=2):
    return base ** exponent

print(power(3))     # 输出 9
print(power(3, 3))  # 输出 27

列表操作
列表是 Python 中最常用的数据结构之一。常见操作包括：
- 添加元素：list.append(item)
- 插入元素：list.insert(index, item)
- 删除元素：list.remove(item) 或 del list[index]
- 列表切片：list[start:end]
- 列表长度：len(list)

字典操作
字典是键值对的集合。常见操作包括：
- 访问值：dict[key]
- 添加/修改：dict[key] = value
- 删除：del dict[key]
- 检查键是否存在：key in dict
- 获取所有键：dict.keys()
- 获取所有值：dict.values()
- 获取所有键值对：dict.items()

异常处理
Python 使用 try-except 来处理异常：
try:
    result = 10 / 0
except ZeroDivisionError:
    print("不能除以零！")
except Exception as e:
    print(f"发生错误：{e}")
finally:
    print("无论是否发生异常都会执行")

模块和包
Python 有丰富的标准库和第三方库。使用 import 导入模块：
import math
print(math.pi)

from datetime import datetime
now = datetime.now()
print(now)

你也可以给模块起别名：
import numpy as np
import pandas as pd

文件操作
Python 提供了简单的文件读写接口：
# 读取文件
with open('file.txt', 'r', encoding='utf-8') as f:
    content = f.read()

# 写入文件
with open('file.txt', 'w', encoding='utf-8') as f:
    f.write('Hello, World!')

使用 with 语句可以确保文件正确关闭。

面向对象编程
Python 支持面向对象编程。使用 class 关键字定义类：
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    
    def introduce(self):
        return f"我叫{self.name}，今年{self.age}岁。"

person = Person("Alice", 25)
print(person.introduce())

列表推导式
列表推导式是 Python 的一个强大特性，可以简洁地创建列表：
# 创建平方数列表
squares = [x**2 for x in range(10)]

# 筛选偶数
evens = [x for x in range(20) if x % 2 == 0]

# 嵌套列表推导
matrix = [[i+j for j in range(3)] for i in range(3)]

装饰器
装饰器是修改函数行为的特殊函数：
def timer(func):
    def wrapper(*args, **kwargs):
        import time
        start = time.time()
        result = func(*args, **kwargs)
        end = time.time()
        print(f"执行时间：{end - start}秒")
        return result
    return wrapper

@timer
def slow_function():
    import time
    time.sleep(1)
    return "完成"

Lambda 函数
Lambda 函数是匿名函数，通常用于简单的操作：
add = lambda x, y: x + y
print(add(3, 5))

# 常与 map、filter 结合使用
numbers = [1, 2, 3, 4, 5]
doubled = list(map(lambda x: x * 2, numbers))
evens = list(filter(lambda x: x % 2 == 0, numbers))

